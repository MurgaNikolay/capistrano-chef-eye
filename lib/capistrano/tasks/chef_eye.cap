namespace :eye do
  desc 'Show help'
  commands = [:start, :restart, :stop, :history, :info, :trace]

  task :hook do
    processes = fetch(:eye_processes)
    output = SSHKit.config.output
    SSHKit.config.format = :dot
    processes ||= begin
      r = eye_execute('info')
      r.map! do |info|
        info.split("\n").map! do |i|
          Array(i.match(/^\s\s(\S+)/))[1]
        end
      end.flatten!.compact!.uniq
    end
    SSHKit.config.output = output
    set(:eye_processes, processes)
    processes.each do |process|
      commands.each do |command|
        Rake::Task.define_task("eye:#{process}:#{command}") do
          process = "#{fetch(:eye_application)}:#{process}" unless fetch(:eye_strategy) == 'local'
          eye_execute(command, process)
        end
      end

      Rake::Task.define_task("eye:#{process}:force_restart") do
        eye_execute(:stop, process)
        eye_execute(:start, process)
      end
    end
  end

  desc 'Show available process list and commands'
  task :processes do
    fetch(:eye_processes).each do |process|
      puts "#{process}".bold.yellow
      commands.each do |command|
        puts "cap eye:#{process.to_s.yellow}:#{command}"
      end
      puts "cap eye:#{process.to_s.yellow}:force_restart"
    end
  end

  commands.each do |command|
    desc command.to_s
    task command do
      process = 'all'
      process = "#{fetch(:eye_application)}:#{process}" unless fetch(:eye_strategy) == 'local'
      eye_execute(command, process)
    end
  end

  desc 'Force restart services'
  task :force_restart do
    Rake::Task['eye:stop'].invoke
    Rake::Task['eye:start'].invoke
  end

  desc 'Check configuration'
  task :check do
    eye_execute(:check, fetch(:eye_file))
  end

  desc 'Reload configuration'
  task :reload do
    eye_execute(:load, fetch(:eye_file))
  end

  # after 'deploy:restart', 'eye:restart'
end

Capistrano::DSL.stages.each do |stage|
  after stage, 'eye:hook'
end

namespace :load do
  task :defaults do
    set :eye_strategy, 'local'
    set :eye_application, -> { fetch(:application) }
    set :eye_roles, :all
    set :eye_servers, -> { release_roles(fetch(:eye_roles)) }
    set :eye_processes, nil
    set :eye_user, -> { 'auto' }
    set :eye_file, -> {
      if fetch(:eye_strategy).to_s == 'local'
        'Eyefile'
      else
        "/etc/eye/{eye_user}/#{fetch(:eye_application)}.eye"
      end
    }
    set :eye_home, -> {
      if fetch(:eye_strategy).to_s == 'local'
        "#{shared_path}"
      else
        "#{fetch(:deploy_to)}"
      end
    }

    set :eye_bin, -> {
      if fetch(:eye_strategy).to_s == 'local'
        '/usr/local/bin/leye'
      else
        '/usr/local/bin/eye'
      end
    }
  end
end

def eye_execute(command, mask='')
  res = []
  rvm_path = fetch(:rvm_path)
  eye_bin = fetch(:eye_bin)
  eye_bin = "#{rvm_path}/bin/rvm system do #{eye_bin}" if rvm_path
  cmd = "#{eye_bin} #{command} #{mask}".strip

  on fetch(:eye_servers) do
    begin
      within fetch(:eye_home) do
        cmd.gsub!('{eye_user}', capture('whoami'))
        result = capture(*cmd.split(' '))
        res << result
        # puts result unless fetch(:format) == :pretty
      end
    rescue Exception => e
      # puts e.message
    end
  end
  res
end
